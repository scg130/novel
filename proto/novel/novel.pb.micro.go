// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/novel/novel.proto

package go_micro_service_novel

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for NovelSrv service

func NewNovelSrvEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for NovelSrv service

type NovelSrvService interface {
	SetVipChapter(ctx context.Context, in *SetVipChapterReq, opts ...client.CallOption) (*Response, error)
	UpdateNovel(ctx context.Context, in *Novel, opts ...client.CallOption) (*Response, error)
	GetNovelList(ctx context.Context, in *NovelListReq, opts ...client.CallOption) (*NovelListResp, error)
	DelCategory(ctx context.Context, in *DelCategoryReq, opts ...client.CallOption) (*CommonResponse, error)
	UpdateCategory(ctx context.Context, in *Category, opts ...client.CallOption) (*CommonResponse, error)
	AddCateGory(ctx context.Context, in *AddCateRequest, opts ...client.CallOption) (*CommonResponse, error)
	GetCateGories(ctx context.Context, in *Request, opts ...client.CallOption) (*CateResponse, error)
	GetNovelById(ctx context.Context, in *Request, opts ...client.CallOption) (*NovelResponse, error)
	GetNovelsByCateId(ctx context.Context, in *Request, opts ...client.CallOption) (*NovelsResponse, error)
	GetNovelsByName(ctx context.Context, in *Request, opts ...client.CallOption) (*NovelsResponse, error)
	GetChaptersByNovelId(ctx context.Context, in *Request, opts ...client.CallOption) (*ChaptersResponse, error)
	GetChapterById(ctx context.Context, in *Request, opts ...client.CallOption) (*ChapterResponse, error)
	GetNotes(ctx context.Context, in *NoteRequest, opts ...client.CallOption) (*NoteResponse, error)
	JoinNote(ctx context.Context, in *Request, opts ...client.CallOption) (*NoteResponse, error)
	DelNote(ctx context.Context, in *DelNoteReq, opts ...client.CallOption) (*Response, error)
}

type novelSrvService struct {
	c    client.Client
	name string
}

func NewNovelSrvService(name string, c client.Client) NovelSrvService {
	return &novelSrvService{
		c:    c,
		name: name,
	}
}

func (c *novelSrvService) SetVipChapter(ctx context.Context, in *SetVipChapterReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "NovelSrv.SetVipChapter", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelSrvService) UpdateNovel(ctx context.Context, in *Novel, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "NovelSrv.UpdateNovel", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelSrvService) GetNovelList(ctx context.Context, in *NovelListReq, opts ...client.CallOption) (*NovelListResp, error) {
	req := c.c.NewRequest(c.name, "NovelSrv.GetNovelList", in)
	out := new(NovelListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelSrvService) DelCategory(ctx context.Context, in *DelCategoryReq, opts ...client.CallOption) (*CommonResponse, error) {
	req := c.c.NewRequest(c.name, "NovelSrv.DelCategory", in)
	out := new(CommonResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelSrvService) UpdateCategory(ctx context.Context, in *Category, opts ...client.CallOption) (*CommonResponse, error) {
	req := c.c.NewRequest(c.name, "NovelSrv.UpdateCategory", in)
	out := new(CommonResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelSrvService) AddCateGory(ctx context.Context, in *AddCateRequest, opts ...client.CallOption) (*CommonResponse, error) {
	req := c.c.NewRequest(c.name, "NovelSrv.AddCateGory", in)
	out := new(CommonResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelSrvService) GetCateGories(ctx context.Context, in *Request, opts ...client.CallOption) (*CateResponse, error) {
	req := c.c.NewRequest(c.name, "NovelSrv.GetCateGories", in)
	out := new(CateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelSrvService) GetNovelById(ctx context.Context, in *Request, opts ...client.CallOption) (*NovelResponse, error) {
	req := c.c.NewRequest(c.name, "NovelSrv.GetNovelById", in)
	out := new(NovelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelSrvService) GetNovelsByCateId(ctx context.Context, in *Request, opts ...client.CallOption) (*NovelsResponse, error) {
	req := c.c.NewRequest(c.name, "NovelSrv.GetNovelsByCateId", in)
	out := new(NovelsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelSrvService) GetNovelsByName(ctx context.Context, in *Request, opts ...client.CallOption) (*NovelsResponse, error) {
	req := c.c.NewRequest(c.name, "NovelSrv.GetNovelsByName", in)
	out := new(NovelsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelSrvService) GetChaptersByNovelId(ctx context.Context, in *Request, opts ...client.CallOption) (*ChaptersResponse, error) {
	req := c.c.NewRequest(c.name, "NovelSrv.GetChaptersByNovelId", in)
	out := new(ChaptersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelSrvService) GetChapterById(ctx context.Context, in *Request, opts ...client.CallOption) (*ChapterResponse, error) {
	req := c.c.NewRequest(c.name, "NovelSrv.GetChapterById", in)
	out := new(ChapterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelSrvService) GetNotes(ctx context.Context, in *NoteRequest, opts ...client.CallOption) (*NoteResponse, error) {
	req := c.c.NewRequest(c.name, "NovelSrv.GetNotes", in)
	out := new(NoteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelSrvService) JoinNote(ctx context.Context, in *Request, opts ...client.CallOption) (*NoteResponse, error) {
	req := c.c.NewRequest(c.name, "NovelSrv.JoinNote", in)
	out := new(NoteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelSrvService) DelNote(ctx context.Context, in *DelNoteReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "NovelSrv.DelNote", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NovelSrv service

type NovelSrvHandler interface {
	SetVipChapter(context.Context, *SetVipChapterReq, *Response) error
	UpdateNovel(context.Context, *Novel, *Response) error
	GetNovelList(context.Context, *NovelListReq, *NovelListResp) error
	DelCategory(context.Context, *DelCategoryReq, *CommonResponse) error
	UpdateCategory(context.Context, *Category, *CommonResponse) error
	AddCateGory(context.Context, *AddCateRequest, *CommonResponse) error
	GetCateGories(context.Context, *Request, *CateResponse) error
	GetNovelById(context.Context, *Request, *NovelResponse) error
	GetNovelsByCateId(context.Context, *Request, *NovelsResponse) error
	GetNovelsByName(context.Context, *Request, *NovelsResponse) error
	GetChaptersByNovelId(context.Context, *Request, *ChaptersResponse) error
	GetChapterById(context.Context, *Request, *ChapterResponse) error
	GetNotes(context.Context, *NoteRequest, *NoteResponse) error
	JoinNote(context.Context, *Request, *NoteResponse) error
	DelNote(context.Context, *DelNoteReq, *Response) error
}

func RegisterNovelSrvHandler(s server.Server, hdlr NovelSrvHandler, opts ...server.HandlerOption) error {
	type novelSrv interface {
		SetVipChapter(ctx context.Context, in *SetVipChapterReq, out *Response) error
		UpdateNovel(ctx context.Context, in *Novel, out *Response) error
		GetNovelList(ctx context.Context, in *NovelListReq, out *NovelListResp) error
		DelCategory(ctx context.Context, in *DelCategoryReq, out *CommonResponse) error
		UpdateCategory(ctx context.Context, in *Category, out *CommonResponse) error
		AddCateGory(ctx context.Context, in *AddCateRequest, out *CommonResponse) error
		GetCateGories(ctx context.Context, in *Request, out *CateResponse) error
		GetNovelById(ctx context.Context, in *Request, out *NovelResponse) error
		GetNovelsByCateId(ctx context.Context, in *Request, out *NovelsResponse) error
		GetNovelsByName(ctx context.Context, in *Request, out *NovelsResponse) error
		GetChaptersByNovelId(ctx context.Context, in *Request, out *ChaptersResponse) error
		GetChapterById(ctx context.Context, in *Request, out *ChapterResponse) error
		GetNotes(ctx context.Context, in *NoteRequest, out *NoteResponse) error
		JoinNote(ctx context.Context, in *Request, out *NoteResponse) error
		DelNote(ctx context.Context, in *DelNoteReq, out *Response) error
	}
	type NovelSrv struct {
		novelSrv
	}
	h := &novelSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&NovelSrv{h}, opts...))
}

type novelSrvHandler struct {
	NovelSrvHandler
}

func (h *novelSrvHandler) SetVipChapter(ctx context.Context, in *SetVipChapterReq, out *Response) error {
	return h.NovelSrvHandler.SetVipChapter(ctx, in, out)
}

func (h *novelSrvHandler) UpdateNovel(ctx context.Context, in *Novel, out *Response) error {
	return h.NovelSrvHandler.UpdateNovel(ctx, in, out)
}

func (h *novelSrvHandler) GetNovelList(ctx context.Context, in *NovelListReq, out *NovelListResp) error {
	return h.NovelSrvHandler.GetNovelList(ctx, in, out)
}

func (h *novelSrvHandler) DelCategory(ctx context.Context, in *DelCategoryReq, out *CommonResponse) error {
	return h.NovelSrvHandler.DelCategory(ctx, in, out)
}

func (h *novelSrvHandler) UpdateCategory(ctx context.Context, in *Category, out *CommonResponse) error {
	return h.NovelSrvHandler.UpdateCategory(ctx, in, out)
}

func (h *novelSrvHandler) AddCateGory(ctx context.Context, in *AddCateRequest, out *CommonResponse) error {
	return h.NovelSrvHandler.AddCateGory(ctx, in, out)
}

func (h *novelSrvHandler) GetCateGories(ctx context.Context, in *Request, out *CateResponse) error {
	return h.NovelSrvHandler.GetCateGories(ctx, in, out)
}

func (h *novelSrvHandler) GetNovelById(ctx context.Context, in *Request, out *NovelResponse) error {
	return h.NovelSrvHandler.GetNovelById(ctx, in, out)
}

func (h *novelSrvHandler) GetNovelsByCateId(ctx context.Context, in *Request, out *NovelsResponse) error {
	return h.NovelSrvHandler.GetNovelsByCateId(ctx, in, out)
}

func (h *novelSrvHandler) GetNovelsByName(ctx context.Context, in *Request, out *NovelsResponse) error {
	return h.NovelSrvHandler.GetNovelsByName(ctx, in, out)
}

func (h *novelSrvHandler) GetChaptersByNovelId(ctx context.Context, in *Request, out *ChaptersResponse) error {
	return h.NovelSrvHandler.GetChaptersByNovelId(ctx, in, out)
}

func (h *novelSrvHandler) GetChapterById(ctx context.Context, in *Request, out *ChapterResponse) error {
	return h.NovelSrvHandler.GetChapterById(ctx, in, out)
}

func (h *novelSrvHandler) GetNotes(ctx context.Context, in *NoteRequest, out *NoteResponse) error {
	return h.NovelSrvHandler.GetNotes(ctx, in, out)
}

func (h *novelSrvHandler) JoinNote(ctx context.Context, in *Request, out *NoteResponse) error {
	return h.NovelSrvHandler.JoinNote(ctx, in, out)
}

func (h *novelSrvHandler) DelNote(ctx context.Context, in *DelNoteReq, out *Response) error {
	return h.NovelSrvHandler.DelNote(ctx, in, out)
}
