// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/charge/charge.proto

package go_micro_srv_charge

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Charge service

func NewChargeEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Charge service

type ChargeService interface {
	Create(ctx context.Context, in *ChargeReq, opts ...client.CallOption) (*ChargeResponse, error)
	ChargeSuccess(ctx context.Context, in *ChargeReq, opts ...client.CallOption) (*ChargeResponse, error)
	QueryOrder(ctx context.Context, in *QueryReq, opts ...client.CallOption) (*QueryRsp, error)
	QueryOrderByThirdOrderId(ctx context.Context, in *ChargeReq, opts ...client.CallOption) (*ChargeResponse, error)
}

type chargeService struct {
	c    client.Client
	name string
}

func NewChargeService(name string, c client.Client) ChargeService {
	return &chargeService{
		c:    c,
		name: name,
	}
}

func (c *chargeService) Create(ctx context.Context, in *ChargeReq, opts ...client.CallOption) (*ChargeResponse, error) {
	req := c.c.NewRequest(c.name, "Charge.Create", in)
	out := new(ChargeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargeService) ChargeSuccess(ctx context.Context, in *ChargeReq, opts ...client.CallOption) (*ChargeResponse, error) {
	req := c.c.NewRequest(c.name, "Charge.ChargeSuccess", in)
	out := new(ChargeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargeService) QueryOrder(ctx context.Context, in *QueryReq, opts ...client.CallOption) (*QueryRsp, error) {
	req := c.c.NewRequest(c.name, "Charge.QueryOrder", in)
	out := new(QueryRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargeService) QueryOrderByThirdOrderId(ctx context.Context, in *ChargeReq, opts ...client.CallOption) (*ChargeResponse, error) {
	req := c.c.NewRequest(c.name, "Charge.QueryOrderByThirdOrderId", in)
	out := new(ChargeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Charge service

type ChargeHandler interface {
	Create(context.Context, *ChargeReq, *ChargeResponse) error
	ChargeSuccess(context.Context, *ChargeReq, *ChargeResponse) error
	QueryOrder(context.Context, *QueryReq, *QueryRsp) error
	QueryOrderByThirdOrderId(context.Context, *ChargeReq, *ChargeResponse) error
}

func RegisterChargeHandler(s server.Server, hdlr ChargeHandler, opts ...server.HandlerOption) error {
	type charge interface {
		Create(ctx context.Context, in *ChargeReq, out *ChargeResponse) error
		ChargeSuccess(ctx context.Context, in *ChargeReq, out *ChargeResponse) error
		QueryOrder(ctx context.Context, in *QueryReq, out *QueryRsp) error
		QueryOrderByThirdOrderId(ctx context.Context, in *ChargeReq, out *ChargeResponse) error
	}
	type Charge struct {
		charge
	}
	h := &chargeHandler{hdlr}
	return s.Handle(s.NewHandler(&Charge{h}, opts...))
}

type chargeHandler struct {
	ChargeHandler
}

func (h *chargeHandler) Create(ctx context.Context, in *ChargeReq, out *ChargeResponse) error {
	return h.ChargeHandler.Create(ctx, in, out)
}

func (h *chargeHandler) ChargeSuccess(ctx context.Context, in *ChargeReq, out *ChargeResponse) error {
	return h.ChargeHandler.ChargeSuccess(ctx, in, out)
}

func (h *chargeHandler) QueryOrder(ctx context.Context, in *QueryReq, out *QueryRsp) error {
	return h.ChargeHandler.QueryOrder(ctx, in, out)
}

func (h *chargeHandler) QueryOrderByThirdOrderId(ctx context.Context, in *ChargeReq, out *ChargeResponse) error {
	return h.ChargeHandler.QueryOrderByThirdOrderId(ctx, in, out)
}
