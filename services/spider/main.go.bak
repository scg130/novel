package main

import (
	"fmt"
	"log"
	"net/http"
	"strings"

	"github.com/PuerkitoBio/goquery"
	_ "github.com/go-sql-driver/mysql"
	"github.com/go-xorm/xorm"
)

const URL = "http://m.fanqianxs.com/book/xiuluodandi/all.html"

func main() {
	initDB()
	novel(URL)
}

func novel(url string) {
	res, err := http.Get(strings.Replace(url, "/all.html", "", -1))
	if err != nil {
		log.Fatal(err)
	}
	if res.StatusCode != 200 {
		log.Fatal("request fail")
	}
	doc, err := goquery.NewDocumentFromReader(res.Body)
	if err != nil {
		log.Fatal(err)
	}
	img, _ := doc.Find(".block_img2").Find("img").Attr("src")
	title, _ := doc.Find(".block_txt2").Find("a").Html()
	author, _ := doc.Find(".block_txt2").Find("p").First().Html()
	intro, _ := doc.Find(".intro_info").Html()
	sql := "select * from novel.novel where name = ?"
	result := make(map[string]interface{})
	exist, err := x.Table("novel.novel").Where("name = ?", title).Get(&result)
	var novelId int64
	if exist {
		novelId = result["id"].(int64)
	} else {
		sql = "insert into novel(name,author,img,intro,cate_id) values (?, ?, ?, ?, 5)"
		insertRes, err := x.Exec(sql, title, author, fmt.Sprintf("%s", img), intro)
		if err == nil && insertRes != nil {
			novelId, _ = insertRes.LastInsertId()
		}
	}

	res, err = http.Get(url)
	if err != nil {
		log.Fatal(err)
	}
	defer res.Body.Close()

	if res.StatusCode != 200 {
		log.Fatal("request fail")
	}

	doc, err = goquery.NewDocumentFromReader(res.Body)
	if err != nil {
		log.Fatal(err)
	}

	doc.Find(".chapter").Find("a").Each(func(i int, s *goquery.Selection) {
		// if i < 2640 {
		// 	return
		// }

		href, _ := s.Attr("href")
		chapter(fmt.Sprintf("http://m.fqxs.org%s", href), s.Text(), i, int(novelId))
	})
}

func chapter(url, title string, num, novelId int) {
	rsp, err := http.Get(url)
	if err != nil {
		log.Fatal(err)
	}

	defer rsp.Body.Close()
	if rsp.StatusCode != 200 {
		log.Fatal("request fail")
	}

	doc, err := goquery.NewDocumentFromReader(rsp.Body)
	if err != nil {
		log.Fatal(err)
	}
	content, _ := doc.Find("#nr1").Html()
	sql := "insert into chapter(title,content,novel_id,num,words) values (?, ?, ?, ?, ?)"
	var t string
	if len(strings.Split(title, " ")) == 2 {
		t = strings.Split(title, " ")[1]
	}
	_, err = x.Exec(sql, t, content, novelId, num+1, len(content))
	sql = "update novel set chapter_total = chapter_total+1,chapter_current=?,words = words+? where id = ?"
	_, err = x.Exec(sql, num+1, len(content), novelId)
	fmt.Println(err)
}

const (
	user = "root"
	pass = "smd123456"
	db   = "novel"
	port = "3306"
	host = "60.205.191.37"
	//host = "127.0.0.1"
)

var x *xorm.Engine

func initDB() {
	dsn := fmt.Sprintf("%s:%s@tcp(%s:%s)/%s?charset=utf8", user, pass, host, port, db)
	var err error
	x, err = xorm.NewEngine("mysql", dsn)
	if err != nil {
		log.Fatal(fmt.Sprintf("mysql connect err:%s", err.Error()))
	}
	if err := x.Ping(); err != nil {
		log.Fatal(fmt.Sprintf("mysql ping err:%s", err.Error()))
	}
	x.ShowSQL(true)

	x.SetMaxIdleConns(5)

	x.SetMaxOpenConns(5)
}
