package main

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/plutov/paypal/v4"
	"github.com/sirupsen/logrus"
)

const (
	CLINET_ID = "AY9-SDyivVLcJzKj6Q9LW68065478kmX1CpyGawdiCo3KN0QeAoY8zCACfI8XRrBa3iSIg7LT2Zm84ti"
	SECRET    = "EA5FYfekkbJ8192khwd8-H8zk5Jtw-ebsZtwetxxoFredTKw72dDAwfFYLbq5X7QkwmNOKisktTYduWm"
)

func main() {
	c, err := paypal.NewClient(CLINET_ID, SECRET, paypal.APIBaseLive)
	if err != nil {
		panic(err)
	}
	ctx := context.Background()
	accesstoken, err := c.GetAccessToken(ctx)

	order, err := c.CreateOrder(ctx, paypal.OrderIntentCapture, []paypal.PurchaseUnitRequest{paypal.PurchaseUnitRequest{ReferenceID: "ref-id", Amount: &paypal.PurchaseUnitAmount{Value: "0.01", Currency: "USD"}}}, &paypal.CreateOrderPayer{}, &paypal.ApplicationContext{ReturnURL: "http://www.556wan.cn/charge/callback"})
	if err != nil {
		panic(err)
	}

	fmt.Println(accesstoken, order.ID, order.Links[1].Href)
	order, err = c.GetOrder(ctx, order.ID)
	if err != nil {
		panic(err)
	}
	fmt.Println(order.Status)

	// PaypalCallback("92K33797R8632794J")
}

//回调(可以利用上面的回调链接实现) orderId 就是返回的orderId := ctx.query("token")
func PaypalCallback(orderId string) error {
	c, err := paypal.NewClient(CLINET_ID, SECRET, paypal.APIBaseSandBox)
	if err != nil {
		panic(err)
	}
	_, err = c.GetAccessToken(context.TODO())
	if err != nil {
		return err
	}
	logrus.Info(orderId)
	ctor := paypal.CaptureOrderRequest{}

	order, err := c.CaptureOrder(context.TODO(), orderId, ctor)
	if err != nil {
		logrus.Info(err, "打款失败")
		return err
	}
	//查看回调完成后订单状态是否支付完成。
	strByte, _ := json.Marshal(order)
	fmt.Println(string(strByte))
	if (*order).Status != "COMPLETED" {
		fmt.Println(order.Status)
		return errors.New("pay fail")
	}

	fmt.Println("支付成功", order.Status, order.Address)
	return nil
}
